//
//  MessagesViewController.swift
//  iMessageExtension
//
//  Created by Tony - Work on 8/1/25.
//

import UIKit
import Messages
import SwiftUI

class MessagesViewController: MSMessagesAppViewController {
    
    private var hostingController: UIHostingController<QuickAddNoteView>?
    private var currentRemoteParticipantId: String?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        print("[MessagesVC] viewDidLoad called")
        // Don't setup view here - wait for willBecomeActive
    }
    
    private func setupSwiftUIView() {
        // Extract participant ID before creating view
        currentRemoteParticipantId = extractRemoteParticipantId()
        print("[MessagesVC] Setting up SwiftUI view with participant ID: \(currentRemoteParticipantId ?? "nil")")
        
        let swiftUIView = QuickAddNoteView(
            conversation: activeConversation,
            extensionContext: self.extensionContext,
            remoteParticipantId: currentRemoteParticipantId
        )
        
        // Remove existing hosting controller if any
        if let existingController = hostingController {
            existingController.willMove(toParent: nil)
            existingController.view.removeFromSuperview()
            existingController.removeFromParent()
        }
        
        hostingController = UIHostingController(rootView: swiftUIView)
        
        guard let hostingController = hostingController else { return }
        
        addChild(hostingController)
        view.addSubview(hostingController.view)
        hostingController.view.translatesAutoresizingMaskIntoConstraints = false
        
        NSLayoutConstraint.activate([
            hostingController.view.topAnchor.constraint(equalTo: view.topAnchor),
            hostingController.view.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            hostingController.view.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            hostingController.view.bottomAnchor.constraint(equalTo: view.bottomAnchor)
        ])
        
        hostingController.didMove(toParent: self)
    }
    
    private func updateSwiftUIView() {
        // Extract participant ID before updating view
        currentRemoteParticipantId = extractRemoteParticipantId()
        print("[MessagesVC] Updating SwiftUI view with participant ID: \(currentRemoteParticipantId ?? "nil")")
        
        hostingController?.rootView = QuickAddNoteView(
            conversation: activeConversation,
            extensionContext: self.extensionContext,
            remoteParticipantId: currentRemoteParticipantId
        )
    }
    
    private func extractRemoteParticipantId() -> String? {
        // Get the first remote participant ID if available
        // In a 1-on-1 conversation, there should be exactly one remote participant
        guard let conversation = activeConversation else {
            print("[MessagesVC] No active conversation available")
            return nil
        }
        
        print("[MessagesVC] Remote participant count: \(conversation.remoteParticipantIdentifiers.count)")
        
        guard let firstParticipantId = conversation.remoteParticipantIdentifiers.first else {
            print("[MessagesVC] No remote participants in conversation")
            return nil
        }
        
        let idString = firstParticipantId.uuidString
        print("[MessagesVC] Extracted remote participant ID: \(idString)")
        print("[MessagesVC] UUID (original): \(idString)")
        print("[MessagesVC] UUID (lowercase): \(idString.lowercased())")
        return idString
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        print("[MessagesVC] willBecomeActive called")
        print("[MessagesVC] Conversation available: \(conversation.remoteParticipantIdentifiers.count) participants")
        
        // Setup or update the SwiftUI view with the conversation
        if hostingController == nil {
            setupSwiftUIView()
        } else {
            updateSwiftUIView()
        }
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dismisses the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        updateSwiftUIView()
    }

}
